package org.usfirst.frc1024.Stronghold;

import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.Joystick;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    public xBox xbox;
    public Joystick lJoy;
    public Joystick rJoy;
    public Logi logi;


    public OI() {
    	xbox = new xBox(0); //not used
        rJoy = new Joystick(1);
        lJoy = new Joystick(2);
        logi = new Logi(3);
    }
    public Joystick getlJoy() {
        return lJoy;
    }

    public Joystick getrJoy() {
        return rJoy;
    }
    public void vibrate(RumbleType type,float value){
    	logi.setRumble(type, value);
    }
    public boolean forceShoot(){ //never implemented
    	return (logi.getButtonRT() && logi.getButtonY());
    }
    public boolean autoShoot(){ //never implemented
    	return (logi.getButtonRT() && !forceShoot());
    }
    public boolean defenseBusterUp(){ //don't even know why this is here
    	return logi.getButtonX();
    }
    public boolean defenseBusterDown(){ //see above
    	return xbox.getButtonA();
    }
    
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

